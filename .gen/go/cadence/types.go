// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by thriftrw v1.11.0. DO NOT EDIT.
// @generated

package cadence

import (
	"fmt"
	"go.uber.org/cadence/.gen/go/shared"
	"go.uber.org/thriftrw/wire"
	"strings"
)

type RegisterTaskHandlerDefinitionsRequest struct {
	DomainUUID      *string                 `json:"domainUUID,omitempty"`
	TaskList        *shared.TaskList        `json:"taskList,omitempty"`
	TaskHandlerType *shared.TaskHandlerType `json:"taskHandlerType,omitempty"`
}

// ToWire translates a RegisterTaskHandlerDefinitionsRequest struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RegisterTaskHandlerDefinitionsRequest) ToWire() (wire.Value, error) {
	var (
		fields [3]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.DomainUUID != nil {
		w, err = wire.NewValueString(*(v.DomainUUID)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}
	if v.TaskList != nil {
		w, err = v.TaskList.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 20, Value: w}
		i++
	}
	if v.TaskHandlerType != nil {
		w, err = v.TaskHandlerType.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 30, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _TaskList_Read(w wire.Value) (*shared.TaskList, error) {
	var v shared.TaskList
	err := v.FromWire(w)
	return &v, err
}

func _TaskHandlerType_Read(w wire.Value) (shared.TaskHandlerType, error) {
	var v shared.TaskHandlerType
	err := v.FromWire(w)
	return v, err
}

// FromWire deserializes a RegisterTaskHandlerDefinitionsRequest struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RegisterTaskHandlerDefinitionsRequest struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RegisterTaskHandlerDefinitionsRequest
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RegisterTaskHandlerDefinitionsRequest) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TBinary {
				var x string
				x, err = field.Value.GetString(), error(nil)
				v.DomainUUID = &x
				if err != nil {
					return err
				}

			}
		case 20:
			if field.Value.Type() == wire.TStruct {
				v.TaskList, err = _TaskList_Read(field.Value)
				if err != nil {
					return err
				}

			}
		case 30:
			if field.Value.Type() == wire.TI32 {
				var x shared.TaskHandlerType
				x, err = _TaskHandlerType_Read(field.Value)
				v.TaskHandlerType = &x
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a RegisterTaskHandlerDefinitionsRequest
// struct.
func (v *RegisterTaskHandlerDefinitionsRequest) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [3]string
	i := 0
	if v.DomainUUID != nil {
		fields[i] = fmt.Sprintf("DomainUUID: %v", *(v.DomainUUID))
		i++
	}
	if v.TaskList != nil {
		fields[i] = fmt.Sprintf("TaskList: %v", v.TaskList)
		i++
	}
	if v.TaskHandlerType != nil {
		fields[i] = fmt.Sprintf("TaskHandlerType: %v", *(v.TaskHandlerType))
		i++
	}

	return fmt.Sprintf("RegisterTaskHandlerDefinitionsRequest{%v}", strings.Join(fields[:i], ", "))
}

func _String_EqualsPtr(lhs, rhs *string) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return (x == y)
	}
	return lhs == nil && rhs == nil
}

func _TaskHandlerType_EqualsPtr(lhs, rhs *shared.TaskHandlerType) bool {
	if lhs != nil && rhs != nil {

		x := *lhs
		y := *rhs
		return x.Equals(y)
	}
	return lhs == nil && rhs == nil
}

// Equals returns true if all the fields of this RegisterTaskHandlerDefinitionsRequest match the
// provided RegisterTaskHandlerDefinitionsRequest.
//
// This function performs a deep comparison.
func (v *RegisterTaskHandlerDefinitionsRequest) Equals(rhs *RegisterTaskHandlerDefinitionsRequest) bool {
	if !_String_EqualsPtr(v.DomainUUID, rhs.DomainUUID) {
		return false
	}
	if !((v.TaskList == nil && rhs.TaskList == nil) || (v.TaskList != nil && rhs.TaskList != nil && v.TaskList.Equals(rhs.TaskList))) {
		return false
	}
	if !_TaskHandlerType_EqualsPtr(v.TaskHandlerType, rhs.TaskHandlerType) {
		return false
	}

	return true
}

// GetDomainUUID returns the value of DomainUUID if it is set or its
// zero value if it is unset.
func (v *RegisterTaskHandlerDefinitionsRequest) GetDomainUUID() (o string) {
	if v.DomainUUID != nil {
		return *v.DomainUUID
	}

	return
}

// GetTaskHandlerType returns the value of TaskHandlerType if it is set or its
// zero value if it is unset.
func (v *RegisterTaskHandlerDefinitionsRequest) GetTaskHandlerType() (o shared.TaskHandlerType) {
	if v.TaskHandlerType != nil {
		return *v.TaskHandlerType
	}

	return
}

type RegisterTaskHandlerDefinitionsResponse struct {
	TaskHandlerDefinitions []*shared.TaskHandlerDefinition `json:"taskHandlerDefinitions,omitempty"`
}

type _List_TaskHandlerDefinition_ValueList []*shared.TaskHandlerDefinition

func (v _List_TaskHandlerDefinition_ValueList) ForEach(f func(wire.Value) error) error {
	for i, x := range v {
		if x == nil {
			return fmt.Errorf("invalid [%v]: value is nil", i)
		}
		w, err := x.ToWire()
		if err != nil {
			return err
		}
		err = f(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func (v _List_TaskHandlerDefinition_ValueList) Size() int {
	return len(v)
}

func (_List_TaskHandlerDefinition_ValueList) ValueType() wire.Type {
	return wire.TStruct
}

func (_List_TaskHandlerDefinition_ValueList) Close() {}

// ToWire translates a RegisterTaskHandlerDefinitionsResponse struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *RegisterTaskHandlerDefinitionsResponse) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.TaskHandlerDefinitions != nil {
		w, err = wire.NewValueList(_List_TaskHandlerDefinition_ValueList(v.TaskHandlerDefinitions)), error(nil)
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 10, Value: w}
		i++
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _TaskHandlerDefinition_Read(w wire.Value) (*shared.TaskHandlerDefinition, error) {
	var v shared.TaskHandlerDefinition
	err := v.FromWire(w)
	return &v, err
}

func _List_TaskHandlerDefinition_Read(l wire.ValueList) ([]*shared.TaskHandlerDefinition, error) {
	if l.ValueType() != wire.TStruct {
		return nil, nil
	}

	o := make([]*shared.TaskHandlerDefinition, 0, l.Size())
	err := l.ForEach(func(x wire.Value) error {
		i, err := _TaskHandlerDefinition_Read(x)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Close()
	return o, err
}

// FromWire deserializes a RegisterTaskHandlerDefinitionsResponse struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a RegisterTaskHandlerDefinitionsResponse struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v RegisterTaskHandlerDefinitionsResponse
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *RegisterTaskHandlerDefinitionsResponse) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 10:
			if field.Value.Type() == wire.TList {
				v.TaskHandlerDefinitions, err = _List_TaskHandlerDefinition_Read(field.Value.GetList())
				if err != nil {
					return err
				}

			}
		}
	}

	return nil
}

// String returns a readable string representation of a RegisterTaskHandlerDefinitionsResponse
// struct.
func (v *RegisterTaskHandlerDefinitionsResponse) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.TaskHandlerDefinitions != nil {
		fields[i] = fmt.Sprintf("TaskHandlerDefinitions: %v", v.TaskHandlerDefinitions)
		i++
	}

	return fmt.Sprintf("RegisterTaskHandlerDefinitionsResponse{%v}", strings.Join(fields[:i], ", "))
}

func _List_TaskHandlerDefinition_Equals(lhs, rhs []*shared.TaskHandlerDefinition) bool {
	if len(lhs) != len(rhs) {
		return false
	}

	for i, lv := range lhs {
		rv := rhs[i]
		if !lv.Equals(rv) {
			return false
		}
	}

	return true
}

// Equals returns true if all the fields of this RegisterTaskHandlerDefinitionsResponse match the
// provided RegisterTaskHandlerDefinitionsResponse.
//
// This function performs a deep comparison.
func (v *RegisterTaskHandlerDefinitionsResponse) Equals(rhs *RegisterTaskHandlerDefinitionsResponse) bool {
	if !((v.TaskHandlerDefinitions == nil && rhs.TaskHandlerDefinitions == nil) || (v.TaskHandlerDefinitions != nil && rhs.TaskHandlerDefinitions != nil && _List_TaskHandlerDefinition_Equals(v.TaskHandlerDefinitions, rhs.TaskHandlerDefinitions))) {
		return false
	}

	return true
}
